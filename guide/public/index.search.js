var relearn_search_index=[{content:`AWS Built In - Reference Guide The purpose of this document is to walk you through the process of building an ABI project. This document is intended for Partners who are part of the AWS Built In program(ABI) and in process of building an ABI project.
Choose Overview to get started.
`,description:"",tags:null,title:"AWS Built In - Reference Guide",uri:"/index.html"},{content:`The AWS Built-in program is a differentiation program that validates Partner solutions which have automated their solution integrations with relevant AWS foundational services like identity, management, security and operations. This program helps customers find and deploy a validated Partner solution that addresses specific customer use cases while providing deep visibility and control of AWS native service integration.
Utilizing AWS Built-In Partner software, customers can trust that the ISV product they are evaluating has been independently verified by AWS.
The program is focused across the four foundational service domains [Security, Identity, Management \u0026 Operations]. Partners who have existing IaC assets to deploy their solution and are part of the Security and CloudOps competency will be considered for a pilot to validate the value added by the ABI program.
For example, when a customer subscribes to an ISV partner product, they need to follow a series of steps in order to transition from the subscription phase to a fully functional one. These steps include a combination of manual and IaC steps. Enabling services like Amazon GuardDuty, AWS Security Hub, Amazon Inspector, and AWS CloudTrail before performing additional steps like adding AWS accounts, integrating with CloudTrail events and more on partner SaaS product.
With ABI packages, the partner leverages the AWS provided templates to enable AWS Services and add their additional logic on top of it. The customer can use these packages to reach full functionality in hours instead of days or weeks.
Partner Workflow AWS provides modules to enable AWS foundational services based on AWS Security Reference Architecture (AWS SRA) guidelines.
Partners can pick these modules and add additional logic to perform remaining steps like enabling partner integration in Security Hub or registering AWS account to partner product.
Once the solution is built, the partner can submit a Git Pull Request (PR) to the repository created for this project.
All the PRs will go through a set of auto validations built-in to the pipelines. On successful completion of validation, the code is merged to the main branch of the repository, and published to other pre-defined targets.
Customer workflow [Subjected to change] Terminologies ABI : AWS Built In (ABI) as explained above. ABI Modules : The GitHub repositories based of AWS SRA, which provide templates for enabling AWS foundational services like CloudTrail, GuardDuty, SecurityHub and more security services. ABI Projects : The GitHub repositories built by Partners in partnership with AWS. While building these projects, partners leverage ABI Modules provided to enable AWS services as needed before creating partner specific assets. The project contains 1\\ IaC templates to automate enablement of both AWS and Partner services, 2\\ Wrappers for most common formats like CfCT manifest, SC Baselines and more to allow customers to easily pick and choose from the services available. For Pilot, we will focus only on including CfCT manifest file in the package. Project : This is a GitHub repository for both ABI modules and ABI Projects Project Owner : The aliases of the 2‑5 Amazonians that will be granted administrative privileges to your AWS Builder Platform project. Project Contributor : Contributors are those that have been granted access to the project’s code repository and can submit a Git Pull Request(PR). All non-AWS contributors will have read-only access to the repository. AWS contributors will have read/write access to the repository. Architecture When you submit a PR, there are set of automatic tests and manual validations that are performed. Following are the series of events that happen after PR.
Static tests are executed. The static tests include lint checkers, scan the templates and code provided against a set of pre- and custom-defined security rules to identify potential vulnerabilities. Tools used to run static tests are listed in How to build an ABI project section. Functional tests on sucessful completion of static tests. You can comment /do-e2e-tests in the PR to kickoff the functional tests. The functional tests, deploys the tempaltes in the multi-account AWS environment associated with this repository. Tools used to run functional tests are listed in How to build an ABI project section. Bot Approval is provided on successful completion of both static and functional tests. Human Approval by one of the AWS personal who have write permissions to the repository after sucessful PR review. Merge: PR is merged to the main branch after clearing all 4 steps above. Publish: the code is then automatically published to the targets. Sample project layout . ├── CODEOWNERS ├── CODE_OF_CONDUCT.md ├── LICENSE ├── NOTICE.txt ├── README.md ├── VERSION ├── docs ├── images ├── lambda_functions │ └── source │ └── enable_integrations ├── scripts │ ├── cleanup_config.json │ ├── cleanup_config.py ├── submodules ## ABI Modules │ └── cfn-abi-aws-securityhub │ ├── README.md │ ├── lambda_functions │ ├── scripts │ └── templates └── templates ## Partner build templates ├── abi-enable-partner1-securityhub-integration.yaml └── enable_integrations └── partner1-enable-integrations.yaml How to get a GitHub repository Work with with your AWS PSA contact to request for a repository. Once the project is approved, an ABI standard repository is created and invitation is shared with you.
You need to Accept the invitation to get access to the repository.
How to build an ABI project CLICK HERE for steps.
ABI deployment modes Launch the CloudFormation Template in the Management Account. Launch using Customizations for Control Tower (CfCT). Things to know For Pilot, the existing modules are expected to operate only in AWS Control Tower environments. Hence, the modules provided as part of ABI should be deployed only in the Home Region of AWS Control Tower. Follow the instructions in this link to enable trusted access for AWS CloudFormation StackSets with AWS Organizations via AWS CloudFormation StackSets console. Granting write permissions to GitHub repository is disabled by ABP when you add external contributors. This is required by AWS Security. For Pilot, the GitHub repositories remain private and GitHub IDs will be added manually. Cleanup Instructions CLICK HERE for additional instructions.
Cost Considerations CLICK HERE for steps.
FAQs CLICK HERE for additional information.
`,description:"",tags:null,title:"Overview",uri:"/overview/index.html"},{content:` Once you have access to the reposity, fork the repository. Additional information available in Fork a repo article.
Refer to below examples to create a fork from CLI.
gh auth login gh repo fork https://github.com/aws-ia/cfn-abi-aws-reference-guide.git Add the required ABI Modules as submodules to your repository (example below to add securityhub repo).
mkdir submodules cd submodules git submodule add https://github.com/aws-ia/cfn-abi-aws-securityhub.git List of all available ABI Modules are Available here.
Build and update the code as per your project needs. Following directort hierarchy as shown below:
. ├── docs # Directory to include additional documentation ├── images # Directory to include images used in the documentation ├── lambda_functions # Directory for storing lambda code │ └── source ├── scripts ├── submodules # Directory for ABI modules │ └── cfn-abi-aws-securityhub │ ├── images │ ├── lambda_functions │ │ └── source │ ├── scripts │ └── templates │ ├── functions │ ├── scripts │ ├── sra-securityhub-org │ └── sra-sh-prerequisites └── templates # Directory for storing IaC templates └── scripts Note: There is no need to package your lambda source. Taskcat will take care of it and upload it in the path of lambda_functions/packages/\u003cdirectory-name/lambda.zip\u003e. Please make references to your code as needed. Run static tests locally.
Execute following tests locally in your environment, the same set of tests are executed as part of the pipeline validations done with these tests:
cfn-lint tests:
pip3 install cfn-lint taskcat lint:
pip3 install taskcat cfn-nag tests and add exceptions if needed
https://github.com/stelligent/cfn_nag
Run functional tests locally
automated-security-helper (ASH) tests (this performs cfn_nag as well)
## Executing ash tool $ git clone https://github.com/aws-samples/automated-security-helper.git /tmp/ash # Set the repo path in your shell for easier access $ export PATH=$PATH:/tmp/ash $ ash --source-dir . $ cat aggregated_results.txt Run taskcat tests to deploy the templates
Update the .taskcat.yaml in the root of the project. Additional information available here Update the default .taskcat.yaml file to closest to below example: project: name: cfn-abi-aws-cloudtrail. # Change this to your project name owner: vinjak@amazon.com # Change to the owner package_lambda: true # Use this if you have lambda code in the repos shorten_stack_name: true # Recommended to use smaller stack names s3_regional_buckets: false # Not required if CopyZips are used. Refer to any ABI module for examples. regions: - us-east-1 tests: enable-cloudtrail-org-level: regions: - us-east-1 # Control Tower Home region for Pilot template: templates/sra-cloudtrail-enable-in-org-ssm.yaml parameters: pSRASourceS3BucketName: $[taskcat_autobucket] pSRASourceS3BucketNamePrefix: $[taskcat_project_name] pSRAS3BucketRegion: us-east-1 # Bucket region. Keep it to us-east-1 as all the resources are deployed in the region. # ApiKey: $[taskcat_ssm_/path/to/ssm/parameter] # update \`taskcat_ssm_/path/to/ssm/parameter\` as needed ^^ (^^) WARNING: Do not include secrets like API Keys and Passwords in the parameters in .taskcat.yml file. Work with your AWS contact to securely make them available in the test environments. On successful completion of both static and functional tests in your local environment, publish the Pull Request(PR).
git add \u003cfile-name\u003e git commit -m \u003ccommit description\u003e git push Create a Pull Request from your fork.
PS: Wait until the static tests are complete as shown below.
Trigger functional tests by adding /do-e2e-tests in the comments. On successful completion of functional tests, bot will add an approval.
A second approval need to be given by an AWS personal. Once you have 2 approvals, you can Merge pull request. NOTE: Always sync your fork to get the latest code and build your solution on top of it. `,description:"How to build an ABI project",tags:null,title:"How to build an ABI project",uri:"/how-to-build-abi-project/index.html"},{content:"ABI deployment modes Launch the CloudFormation Template in the Management Account. Launch using Customizations for Control Tower (CfCT). ",description:"",tags:null,title:"Deployment Options",uri:"/deployment-options/index.html"},{content:`Launch the cloudformation template provided as part /templates/ in the Management Account of the organization.
Download the cloudformation template from source: https://aws-abi-pilot.s3.us-east-1.amazonaws.com/cfn-abi-aws-reference-guide/templates/abi-enable-partner1-securityhub-integration.yaml
Launch CloudFormation template in your AWS Control Tower home region.
Stack name: launch-abi-sample-partner-integration ARN of partner integration to turn on in AWS Security Hub: arn:aws:securityhub:$[taskcat_current_region]::product/cloud-custodian/cloud-custodian Leave the remaining values default. Choose both the Capabilities and select Submit to launch the stack.
[] I acknowledge that AWS CloudFormation might create IAM resources with custom names.
[] I acknowledge that AWS CloudFormation might require the following capability: CAPABILITY_AUTO_EXPAND
Wait for the CloudFormation status to change to CREATE_COMPLETE state.
`,description:"Launch ABI using CloudFormation Templates",tags:null,title:"Launch ABI using CloudFormation Templates",uri:"/deployment-options/launch-using-cloudformation/index.html"},{content:`Customizations for AWS Control Tower combines AWS Control Tower and other highly-available, trusted AWS services to help customers more quickly set up a secure, multi-account AWS environment using AWS best practices. You can easily add customizations to your AWS Control Tower landing zone using an AWS CloudFormation template and service control policies (SCPs). You can deploy the custom template and policies to individual accounts and organizational units (OUs) within your organization. It also integrates with AWS Control Tower lifecycle events to ensure that resource deployments stay in sync with your landing zone. For example, when a new account is created using the AWS Control Tower account factory, Customizations for AWS Control Tower ensures that all resources attached to the account’s OUs will be automatically deployed.
The templates provided as part of the ABI packages are deployable using Customizations for Control Tower. Please check below for additional details.
Pre-requisites The CfCT solution, do not have ability to launch resources on the Management account. Hence, you need to create the role with required permissions in the Management account. How it works To deploy this sample partner integration page using CfCT solution, add the following blurb to the manifest.yaml file from your CfCT solution and update the account/ou names as needed.
resources: - name: sra-enable-partner1-solution resource_file: https://aws-abi-pilot.s3.us-east-1.amazonaws.com/cfn-abi-aws-reference-guide/templates/abi-enable-partner1-securityhub-integration.yaml deploy_method: stack_set parameters: - parameter_key: pProductArn parameter_value: arn:aws:securityhub:us-east-1::product/cloud-custodian/cloud-custodian - parameter_key: pSRASourceS3BucketName parameter_value: aws-abi-pilot - parameter_key: pSRAStagingS3KeyPrefix parameter_value: cfn-abi-aws-reference-guide deployment_targets: accounts: - [[MANAGEMENT-AWS-ACCOUNT-ID]] `,description:"Launch ABI using Customizations for Control Tower (CfCT)",tags:null,title:"Launch ABI using Customizations for Control Tower (CfCT)",uri:"/deployment-options/launch-using-cfct/index.html"},{content:"Cost considertions ",description:"Details on cost considerations",tags:null,title:"Cost considerations",uri:"/cost-considerations/index.html"},{content:"Cleanup Instructions ",description:"Instructions to cleanup the resources created by the ABI package",tags:null,title:"Cleanup Instructions",uri:"/cleanup-instructions/index.html"},{content:" AWS Service Name Repository AWS Security Hub cfn-abi-aws-securityhub AWS GuardDuty cfn-abi-amazon-guardduty AWS Control Tower cfn-abi-aws-cloudtrail ",description:"List of available ABI modules",tags:null,title:"ABI Modules list",uri:"/available_modules/index.html"},{content:`How to add internal AWS contributors? Access to the repositories are controlled from the builder platform interface. Refer to ABP usage guide for steps.
How to add contributors from partner side? Use the same mechanism mentioned above to manage access to the repository. If you are a partner trying to access these repos, reach out your assigned AWS PSA.
How do I add secrets to the parameters in the taskcat file? Our preferred way is to pass the parameter as SSM_Parameter value and pass it as $[taskcat_ssm_/path/to/ssm/parameter] as a value. While testing locally, make sure to create the parameter in your account/region that you are testing. When you check-in the code, reach out to your AWS contact to facilate this setup in your test environment.
Why is my ASH tool failing? A: Please make sure you have docker running in your local environment before executing ash tool. There were issues reported with podman, please use docker while we investigate the issue.
`,description:"Frequently asked questions",tags:null,title:"FAQs",uri:"/faqs/index.html"},{content:"",description:"",tags:null,title:"Categories",uri:"/categories/index.html"},{content:"",description:"",tags:null,title:"Tags",uri:"/tags/index.html"}]